#include "media_utils.h"
#include "aaf_utils.h"
#include "aaf_parser.h"
#include <AAF.h>
#include <AAFResult.h>
#include <AAFTypes.h>
#include <AAFDataDefs.h>
#include <filesystem>
#include <iostream>
#include <fstream>
#include <vector>
#include <set>

void createExtractedMediaFolder() {
    try {
        if (!std::filesystem::exists("extracted_media")) {
            std::filesystem::create_directory("extracted_media");
        }
        if (!std::filesystem::exists("audio_files")) {
            std::filesystem::create_directory("audio_files");
        }
    } catch (const std::exception& e) {
        std::cerr << "Error creating media folders: " << e.what() << std::endl;
    }
}

void extractEmbeddedAudio(IAAFEssenceData* pEssenceData, const std::string& outputPath, std::ofstream& out) {
    if (!pEssenceData) return;
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä embedded –¥–∞–Ω–Ω—ã—Ö
        aafLength_t dataSize = 0;
        HRESULT hr = pEssenceData->GetSize(&dataSize);
        if (FAILED(hr) || dataSize == 0) {
            out << "Failed to get essence data size" << std::endl;
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        std::vector<aafUInt8> buffer(static_cast<size_t>(dataSize));
        aafUInt32 bytesRead = 0;
        
        // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        hr = pEssenceData->Read(static_cast<aafUInt32>(dataSize), buffer.data(), &bytesRead);
        if (FAILED(hr)) {
            out << "Failed to read essence data" << std::endl;
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        std::filesystem::path filePath(outputPath);
        std::filesystem::create_directories(filePath.parent_path());
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        std::ofstream outFile(outputPath, std::ios::binary);
        if (!outFile) {
            out << "Failed to create output file: " << outputPath << std::endl;
            return;
        }
        
        outFile.write(reinterpret_cast<const char*>(buffer.data()), bytesRead);
        outFile.close();
        
    } catch (const std::exception& e) {
        out << "Error extracting embedded audio: " << e.what() << std::endl;
    }
}

std::string findAndExtractEssenceData(IAAFHeader* pHeader, const aafMobID_t& mobID, 
                                     const std::string& mobIdStr, const std::map<std::string, std::string>& mobIdToName, std::ofstream& out) {
    if (!pHeader) return "";
    
    out << "  [EMBEDDED] Searching for EssenceData with MobID: " << mobIdStr << std::endl;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ SourceMob (FileMob) —Å —ç—Ç–∏–º ID
    aafSearchCrit_t searchCrit;
    searchCrit.searchTag = kAAFByMobKind;
    searchCrit.tags.mobKind = kAAFFileMob;  // SourceMob —ç—Ç–æ FileMob –≤ AAF
    
    IEnumAAFMobs* pSourceMobEnum = nullptr;
    if (SUCCEEDED(pHeader->GetMobs(&searchCrit, &pSourceMobEnum))) {
        IAAFMob* pSourceMob = nullptr;
        while (SUCCEEDED(pSourceMobEnum->NextOne(&pSourceMob))) {
            aafMobID_t sourceMobID;
            if (SUCCEEDED(pSourceMob->GetMobID(&sourceMobID))) {
                if (memcmp(&mobID, &sourceMobID, sizeof(aafMobID_t)) == 0) {
                    out << "  [EMBEDDED] Found matching SourceMob!" << std::endl;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —ç—Ç–æ–≥–æ SourceMob EssenceDescriptor
                    IAAFSourceMob* pSrcMob = nullptr;
                    if (SUCCEEDED(pSourceMob->QueryInterface(IID_IAAFSourceMob, (void**)&pSrcMob))) {
                        IAAFEssenceDescriptor* pEssDesc = nullptr;
                        if (SUCCEEDED(pSrcMob->GetEssenceDescriptor(&pEssDesc))) {
                            out << "  [EMBEDDED] Found EssenceDescriptor - potentially embedded!" << std::endl;
                            
                            // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è embedded –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                            std::string fileName = "embedded_" + mobIdStr + ".wav";
                            auto it = mobIdToName.find(mobIdStr);
                            if (it != mobIdToName.end() && !it->second.empty()) {
                                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                                fileName = it->second;
                                // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .wav –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                                if (fileName.find('.') == std::string::npos) {
                                    fileName += ".wav";
                                }
                                out << "  [EMBEDDED] Using mapped filename: " << fileName << std::endl;
                            }
                            std::string outputPath = "extracted_media/" + fileName;
                            
                            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ EssenceData
                            IEnumAAFEssenceData* pEssenceEnum = nullptr;
                            if (SUCCEEDED(pHeader->EnumEssenceData(&pEssenceEnum))) {
                                IAAFEssenceData* pEssenceData = nullptr;
                                while (SUCCEEDED(pEssenceEnum->NextOne(&pEssenceData))) {
                                    aafMobID_t essenceMobID;
                                    if (SUCCEEDED(pEssenceData->GetFileMobID(&essenceMobID))) {
                                        if (memcmp(&mobID, &essenceMobID, sizeof(aafMobID_t)) == 0) {
                                            out << "  [EMBEDDED] Found matching EssenceData!" << std::endl;
                                            
                                            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                                            extractEmbeddedAudio(pEssenceData, outputPath, out);
                                            
                                            pEssenceData->Release();
                                            pEssenceEnum->Release();
                                            pEssDesc->Release();
                                            pSrcMob->Release();
                                            pSourceMob->Release();
                                            pSourceMobEnum->Release();
                                            return outputPath;
                                        }
                                    }
                                    pEssenceData->Release();
                                }
                                pEssenceEnum->Release();
                            }
                            
                            // –ï—Å–ª–∏ EssenceData –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ embedded
                            out << "  [EMBEDDED] No EssenceData found, but marked as embedded file" << std::endl;
                            pEssDesc->Release();
                        }
                        pSrcMob->Release();
                    }
                }
            }
            pSourceMob->Release();
        }
        pSourceMobEnum->Release();
    }
    
    // –ï—Å–ª–∏ SourceMob –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ EssenceData
    IEnumAAFEssenceData* pEssenceEnum = nullptr;
    if (SUCCEEDED(pHeader->EnumEssenceData(&pEssenceEnum))) {
        IAAFEssenceData* pEssenceData = nullptr;
        while (SUCCEEDED(pEssenceEnum->NextOne(&pEssenceData))) {
            aafMobID_t essenceMobID;
            if (SUCCEEDED(pEssenceData->GetFileMobID(&essenceMobID))) {
                if (memcmp(&mobID, &essenceMobID, sizeof(aafMobID_t)) == 0) {
                    out << "  [EMBEDDED] Found direct EssenceData match!" << std::endl;
                    
                    // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è embedded –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                    std::string fileName = "embedded_" + mobIdStr + ".wav";
                    auto it = mobIdToName.find(mobIdStr);
                    if (it != mobIdToName.end() && !it->second.empty()) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                        fileName = it->second;
                        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .wav –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        if (fileName.find('.') == std::string::npos) {
                            fileName += ".wav";
                        }
                        out << "  [EMBEDDED] Using mapped filename: " << fileName << std::endl;
                    }
                    std::string outputPath = "extracted_media/" + fileName;
                    extractEmbeddedAudio(pEssenceData, outputPath, out);
                    
                    pEssenceData->Release();
                    pEssenceEnum->Release();
                    return outputPath;
                }
            }
            pEssenceData->Release();
        }
        pEssenceEnum->Release();
    }
    
    out << "  [EMBEDDED] No matching EssenceData found" << std::endl;
    return "";
}

bool isFileEmbedded(const std::set<std::string>& embeddedMobIDs, const std::string& mobIdStr) {
    return embeddedMobIDs.find(mobIdStr) != embeddedMobIDs.end();
}

void processAudioFiles(const ProjectData& projectData, std::ofstream& out) {
    out << "\nüéµ === PROCESSING AUDIO FILES ===" << std::endl;
    out << "[*] Created audio_files folder for all project audio" << std::endl;
    
    std::set<std::string> uniqueFiles;
    int copiedFiles = 0;
    int embeddedFiles = 0;
    int missingFiles = 0;
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤
    for (const auto& track : projectData.tracks) {
        for (const auto& clip : track.clips) {
            if (clip.fileName.empty()) continue;
            uniqueFiles.insert(clip.fileName);
        }
    }
    
    out << "[*] Found " << uniqueFiles.size() << " unique audio files to process:" << std::endl;
    
    // –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
    std::vector<std::string> audioExtensions = {".wav", ".aiff", ".aif", ".mp3", ".flac", ".ogg", ".m4a"};
    
    // –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    std::vector<std::string> searchPaths = {
        ".",
        "..",
        "../../",
        "../../../",
        "../../../../",
        "audio/",
        "Audio/",
        "media/",
        "Media/",
        "sounds/",
        "Sounds/",
        "J:/Nuendo PROJECTS SSD/Other/DP/Bezhanov/BEZHANOV/",
        "J:/Nuendo PROJECTS SSD/Other/DP/Bezhanov/",
        "J:/Nuendo PROJECTS SSD/Other/DP/",
        "J:/Nuendo PROJECTS SSD/Other/",
        "J:/Nuendo PROJECTS SSD/",
        "J:/"
    };
    
    for (const auto& fileName : uniqueFiles) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª embedded
            if (fileName.find("embedded_") == 0 || fileName.find("extracted_media/embedded_") != std::string::npos) {
                out << "  üì¶ Embedded: " << fileName << std::endl;
                embeddedFiles++;
            } else if (fileName == "(silence)" || fileName.find("unknown_") == 0) {
                out << "  ‚ùå Missing: " << fileName << std::endl;
                missingFiles++;
            } else {
                // –û–±—ã—á–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π —Ñ–∞–π–ª - –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                bool found = false;
                std::string foundPath;
                
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                if (std::filesystem::exists(fileName)) {
                    foundPath = fileName;
                    found = true;
                } else {
                    // –ò—â–µ–º —Ñ–∞–π–ª –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
                    for (const auto& searchPath : searchPaths) {
                        std::string fullPath = searchPath + "/" + fileName;
                        if (std::filesystem::exists(fullPath)) {
                            foundPath = fullPath;
                            found = true;
                            break;
                        }
                        
                        // –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, .mxf_L), 
                        // –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å –∞—É–¥–∏–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
                        std::string baseName = fileName;
                        size_t lastDot = baseName.find_last_of('.');
                        if (lastDot != std::string::npos) {
                            baseName = baseName.substr(0, lastDot);
                        }
                        
                        // –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ _L, _R
                        if (baseName.length() > 2) {
                            if (baseName.substr(baseName.length() - 2) == "_L" || 
                                baseName.substr(baseName.length() - 2) == "_R") {
                                baseName = baseName.substr(0, baseName.length() - 2);
                            }
                        }
                        
                        for (const auto& ext : audioExtensions) {
                            std::string testPath = searchPath + "/" + baseName + ext;
                            if (std::filesystem::exists(testPath)) {
                                foundPath = testPath;
                                found = true;
                                break;
                            }
                        }
                        
                        if (found) break;
                    }
                }
                
                if (found) {
                    try {
                        std::string destPath = "audio_files/" + std::filesystem::path(foundPath).filename().string();
                        std::filesystem::copy_file(foundPath, destPath, 
                                                 std::filesystem::copy_options::overwrite_existing);
                        out << "  üìÅ Copied: " << foundPath << " -> " << destPath << std::endl;
                        copiedFiles++;
                    } catch (const std::exception& e) {
                        out << "  ‚ùå Error copying " << foundPath << ": " << e.what() << std::endl;
                        missingFiles++;
                    }
                } else {
                    out << "  ‚ùå File not found: " << fileName << " (searched in multiple locations)" << std::endl;
                    missingFiles++;
                }
            }
        } catch (const std::exception& e) {
            out << "  ‚ùå Error processing " << fileName << ": " << e.what() << std::endl;
            missingFiles++;
        }
    }
    
    out << "\nüìä Audio Files Summary:" << std::endl;
    out << "  Copied external files: " << copiedFiles << std::endl;
    out << "  Embedded files: " << embeddedFiles << std::endl;
    out << "  Missing files: " << missingFiles << std::endl;
    out << "  Total unique files: " << uniqueFiles.size() << std::endl;
}

void debugEssenceData(IAAFHeader* pHeader, std::ofstream& out) {
    if (!pHeader) return;
    
    out << "\nüîç === DEBUGGING ESSENCE DATA ===" << std::endl;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ EssenceData
    int essenceCount = 0;
    IEnumAAFEssenceData* pEssenceEnum = nullptr;
    if (SUCCEEDED(pHeader->EnumEssenceData(&pEssenceEnum))) {
        IAAFEssenceData* pEssenceData = nullptr;
        while (SUCCEEDED(pEssenceEnum->NextOne(&pEssenceData))) {
            essenceCount++;
            
            aafMobID_t essenceMobID;
            if (SUCCEEDED(pEssenceData->GetFileMobID(&essenceMobID))) {
                std::string mobIdStr = formatMobID(essenceMobID);
                
                aafLength_t dataSize = 0;
                if (SUCCEEDED(pEssenceData->GetSize(&dataSize))) {
                    out << "  EssenceData #" << essenceCount << ": MobID=" << mobIdStr 
                        << ", Size=" << dataSize << " bytes" << std::endl;
                } else {
                    out << "  EssenceData #" << essenceCount << ": MobID=" << mobIdStr 
                        << ", Size=unknown" << std::endl;
                }
            }
            
            pEssenceData->Release();
        }
        pEssenceEnum->Release();
    }
    
    out << "Total EssenceData found: " << essenceCount << std::endl;
}

std::set<std::string> buildEmbeddedFilesMap(IAAFHeader* pHeader, std::ofstream& out) {
    std::set<std::string> embeddedMobIDs;
    
    if (!pHeader) return embeddedMobIDs;
    
    out << "\nüîç === BUILDING EMBEDDED FILES MAP ===" << std::endl;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ EssenceData MobID
    std::set<std::string> essenceDataMobIDs;
    IEnumAAFEssenceData* pEssenceEnum = nullptr;
    if (SUCCEEDED(pHeader->EnumEssenceData(&pEssenceEnum))) {
        IAAFEssenceData* pEssenceData = nullptr;
        while (SUCCEEDED(pEssenceEnum->NextOne(&pEssenceData))) {
            aafMobID_t essenceMobID;
            if (SUCCEEDED(pEssenceData->GetFileMobID(&essenceMobID))) {
                std::string mobIdStr = formatMobID(essenceMobID);
                essenceDataMobIDs.insert(mobIdStr);
            }
            pEssenceData->Release();
        }
        pEssenceEnum->Release();
    }
    
    out << "[*] Found " << essenceDataMobIDs.size() << " EssenceData entries" << std::endl;
    
    // –¢–µ–ø–µ—Ä—å –∏—â–µ–º FileMob, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ —ç—Ç–∏ EssenceData
    aafSearchCrit_t searchCrit;
    searchCrit.searchTag = kAAFByMobKind;
    searchCrit.tags.mobKind = kAAFFileMob;
    
    IEnumAAFMobs* pMobEnum = nullptr;
    if (SUCCEEDED(pHeader->GetMobs(&searchCrit, &pMobEnum))) {
        IAAFMob* pMob = nullptr;
        while (SUCCEEDED(pMobEnum->NextOne(&pMob))) {
            aafMobID_t mobID;
            if (SUCCEEDED(pMob->GetMobID(&mobID))) {
                std::string mobIdStr = formatMobID(mobID);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ EssenceData –¥–ª—è —ç—Ç–æ–≥–æ FileMob
                if (essenceDataMobIDs.find(mobIdStr) != essenceDataMobIDs.end()) {
                    embeddedMobIDs.insert(mobIdStr);
                    out << "[EMBEDDED] FileMob " << mobIdStr << " has EssenceData" << std::endl;
                }
            }
            pMob->Release();
        }
        pMobEnum->Release();
    }
    
    out << "[*] Total embedded files found: " << embeddedMobIDs.size() << std::endl;
    return embeddedMobIDs;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ embedded —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É —Å—Å—ã–ª–æ–∫ (SourceClip -> MasterMob -> FileMob)
std::string findEmbeddedFileRecursive(IAAFHeader* pHeader, const aafMobID_t& mobID, 
                                     const std::set<std::string>& embeddedMobIDs,
                                     const std::map<std::string, std::string>& mobIdToName, 
                                     std::ofstream& out) {
    if (!pHeader) return "";
    
    std::string mobIdStr = formatMobID(mobID);
    out << "  [DEBUG] Checking for embedded file: " << mobIdStr << std::endl;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∞–º MobID embedded
    if (embeddedMobIDs.find(mobIdStr) != embeddedMobIDs.end()) {
        out << "  [EMBEDDED] Direct embedded file found: " << mobIdStr << std::endl;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ mobIdToName (–∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç–∏ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º)
        if (mobIdToName.count(mobIdStr)) {
            std::string filePath = mobIdToName.at(mobIdStr);
            out << "  [EMBEDDED] Using extracted file: " << filePath << std::endl;
            return filePath;
        }
        return "";
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç, –∏—â–µ–º MasterMob/CompositionMob —Å —ç—Ç–∏–º ID
    IAAFMob* pMob = nullptr;
    if (SUCCEEDED(pHeader->LookupMob(mobID, &pMob))) {
        out << "  [DEBUG] Found Mob with ID: " << mobIdStr << std::endl;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã —ç—Ç–æ–≥–æ Mob
        IEnumAAFMobSlots* pSlotEnum = nullptr;
        if (SUCCEEDED(pMob->GetSlots(&pSlotEnum))) {
            IAAFMobSlot* pSlot = nullptr;
            while (SUCCEEDED(pSlotEnum->NextOne(&pSlot))) {
                IAAFSegment* pSegment = nullptr;
                if (SUCCEEDED(pSlot->GetSegment(&pSegment))) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–≥–º–µ–Ω—Ç SourceClip
                    IAAFSourceClip* pSourceClip = nullptr;
                    if (SUCCEEDED(pSegment->QueryInterface(IID_IAAFSourceClip, (void**)&pSourceClip))) {
                        aafSourceRef_t sourceRef;
                        if (SUCCEEDED(pSourceClip->GetSourceReference(&sourceRef))) {
                            std::string refMobIdStr = formatMobID(sourceRef.sourceID);
                            out << "  [DEBUG] Found SourceClip reference: " << refMobIdStr << std::endl;
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç SourceRef embedded
                            if (embeddedMobIDs.find(refMobIdStr) != embeddedMobIDs.end()) {
                                out << "  [EMBEDDED] Found embedded file via MasterMob: " << refMobIdStr << std::endl;
                                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ mobIdToName (–∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç–∏ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º)
                                if (mobIdToName.count(refMobIdStr)) {
                                    std::string filePath = mobIdToName.at(refMobIdStr);
                                    out << "  [EMBEDDED] Using extracted file: " << filePath << std::endl;
                                    pSourceClip->Release();
                                    pSegment->Release();
                                    pSlot->Release();
                                    pSlotEnum->Release();
                                    pMob->Release();
                                    return filePath;
                                }
                            }
                        }
                        pSourceClip->Release();
                    }
                    pSegment->Release();
                }
                pSlot->Release();
            }
            pSlotEnum->Release();
        }
        pMob->Release();
    } else {
        out << "  [DEBUG] Mob not found: " << mobIdStr << std::endl;
    }
    
    return "";
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± embedded —Ñ–∞–π–ª–µ
EmbeddedFileInfo findEmbeddedFileInfo(IAAFHeader* pHeader, const aafMobID_t& mobID, 
                                     const std::set<std::string>& embeddedMobIDs,
                                     const std::map<std::string, std::string>& mobIdToName, 
                                     std::ofstream& out) {
    if (!pHeader) return EmbeddedFileInfo();
    
    std::string mobIdStr = formatMobID(mobID);
    out << "  [DEBUG] Checking for embedded file info: " << mobIdStr << std::endl;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∞–º MobID embedded
    if (embeddedMobIDs.find(mobIdStr) != embeddedMobIDs.end()) {
        out << "  [EMBEDDED] Direct embedded file found: " << mobIdStr << std::endl;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ mobIdToName (–∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç–∏ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º)
        if (mobIdToName.count(mobIdStr)) {
            std::string filePath = mobIdToName.at(mobIdStr);
            out << "  [EMBEDDED] Using extracted file: " << filePath << " with MOB ID: " << mobIdStr << std::endl;
            return EmbeddedFileInfo(filePath, mobIdStr);
        }
        return EmbeddedFileInfo();
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç, –∏—â–µ–º MasterMob/CompositionMob —Å —ç—Ç–∏–º ID
    IAAFMob* pMob = nullptr;
    if (SUCCEEDED(pHeader->LookupMob(mobID, &pMob))) {
        out << "  [DEBUG] Found Mob with ID: " << mobIdStr << std::endl;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã —ç—Ç–æ–≥–æ Mob
        IEnumAAFMobSlots* pSlotEnum = nullptr;
        if (SUCCEEDED(pMob->GetSlots(&pSlotEnum))) {
            IAAFMobSlot* pSlot = nullptr;
            while (SUCCEEDED(pSlotEnum->NextOne(&pSlot))) {
                IAAFSegment* pSegment = nullptr;
                if (SUCCEEDED(pSlot->GetSegment(&pSegment))) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–≥–º–µ–Ω—Ç SourceClip
                    IAAFSourceClip* pSourceClip = nullptr;
                    if (SUCCEEDED(pSegment->QueryInterface(IID_IAAFSourceClip, (void**)&pSourceClip))) {
                        aafSourceRef_t sourceRef;
                        if (SUCCEEDED(pSourceClip->GetSourceReference(&sourceRef))) {
                            std::string refMobIdStr = formatMobID(sourceRef.sourceID);
                            out << "  [DEBUG] Found SourceClip reference: " << refMobIdStr << std::endl;
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç SourceRef embedded
                            if (embeddedMobIDs.find(refMobIdStr) != embeddedMobIDs.end()) {
                                out << "  [EMBEDDED] Found embedded file via MasterMob: " << refMobIdStr << std::endl;
                                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ mobIdToName –∏ –ü–†–ê–í–ò–õ–¨–ù–´–ô MOB ID embedded —Ñ–∞–π–ª–∞
                                if (mobIdToName.count(refMobIdStr)) {
                                    std::string filePath = mobIdToName.at(refMobIdStr);
                                    out << "  [EMBEDDED] Using extracted file: " << filePath << " with MOB ID: " << refMobIdStr << std::endl;
                                    pSourceClip->Release();
                                    pSegment->Release();
                                    pSlot->Release();
                                    pSlotEnum->Release();
                                    pMob->Release();
                                    return EmbeddedFileInfo(filePath, refMobIdStr);
                                }
                            }
                        }
                        pSourceClip->Release();
                    }
                    pSegment->Release();
                }
                pSlot->Release();
            }
            pSlotEnum->Release();
        }
        pMob->Release();
    } 
    
    return EmbeddedFileInfo(); // –ù–µ –Ω–∞–π–¥–µ–Ω embedded —Ñ–∞–π–ª
}

std::map<std::string, std::string> buildEmbeddedFileNameMapping(IAAFHeader* pHeader, 
                                                               const std::map<std::string, std::string>& mobIdToName, 
                                                               std::ofstream& out) {
    std::map<std::string, std::string> embeddedMapping;
    out << "\nüîó === BUILDING EMBEDDED FILE NAME MAPPING ===" << std::endl;
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ embedded MobID
    std::set<std::string> embeddedMobIDs;
    IEnumAAFEssenceData* pEssenceEnum = nullptr;
    if (SUCCEEDED(pHeader->EnumEssenceData(&pEssenceEnum))) {
        IAAFEssenceData* pEssenceData = nullptr;
        while (SUCCEEDED(pEssenceEnum->NextOne(&pEssenceData))) {
            aafMobID_t essenceMobID;
            if (SUCCEEDED(pEssenceData->GetFileMobID(&essenceMobID))) {
                std::string mobIdStr = formatMobID(essenceMobID);
                embeddedMobIDs.insert(mobIdStr);
            }
            pEssenceData->Release();
        }
        pEssenceEnum->Release();
    }
    
    out << "[*] Found " << embeddedMobIDs.size() << " embedded files" << std::endl;
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –∏—â–µ–º –≤—Å–µ MasterMob, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ embedded SourceMob
    IEnumAAFMobs* pMobEnum = nullptr;
    if (SUCCEEDED(pHeader->GetMobs(nullptr, &pMobEnum))) {
        IAAFMob* pMob = nullptr;
        while (SUCCEEDED(pMobEnum->NextOne(&pMob))) {
            IAAFMasterMob* pMasterMob = nullptr;
            if (SUCCEEDED(pMob->QueryInterface(IID_IAAFMasterMob, (void**)&pMasterMob))) {
                aafMobID_t masterMobID;
                if (SUCCEEDED(pMob->GetMobID(&masterMobID))) {
                    std::string masterMobIdStr = formatMobID(masterMobID);
                    
                    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è MasterMob (—ç—Ç–æ –±—É–¥–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞)
                    std::string readableName;
                    auto it = mobIdToName.find(masterMobIdStr);
                    if (it != mobIdToName.end()) {
                        readableName = it->second;
                        out << "[DEBUG] Processing MasterMob " << masterMobIdStr << " with name: " << readableName << std::endl;
                    }
                    
                    // –ò—â–µ–º —Å–ª–æ—Ç—ã MasterMob
                    aafNumSlots_t numSlots = 0;
                    if (SUCCEEDED(pMob->CountSlots(&numSlots))) {
                        for (aafUInt32 i = 0; i < numSlots; ++i) {
                            IAAFMobSlot* pSlot = nullptr;
                            if (SUCCEEDED(pMob->GetSlotAt(i, &pSlot))) {
                                IAAFSegment* pSegment = nullptr;
                                if (SUCCEEDED(pSlot->GetSegment(&pSegment))) {
                                    IAAFSourceClip* pSourceClip = nullptr;
                                    if (SUCCEEDED(pSegment->QueryInterface(IID_IAAFSourceClip, (void**)&pSourceClip))) {
                                        aafSourceRef_t sourceRef;
                                        if (SUCCEEDED(pSourceClip->GetSourceReference(&sourceRef))) {
                                            std::string sourceMobIdStr = formatMobID(sourceRef.sourceID);
                                            out << "[DEBUG] MasterMob slot " << i << " references SourceMob: " << sourceMobIdStr << std::endl;
                                            
                                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç SourceMob embedded
                                            if (embeddedMobIDs.find(sourceMobIdStr) != embeddedMobIDs.end()) {
                                                if (!readableName.empty() && readableName != "[MasterMob]") {
                                                    embeddedMapping[sourceMobIdStr] = readableName;
                                                    out << "[MAPPING] " << sourceMobIdStr << " -> " << readableName << std::endl;
                                                }
                                            }
                                        }
                                        pSourceClip->Release();
                                    }
                                    pSegment->Release();
                                }
                                pSlot->Release();
                            }
                        }
                    }
                }
                pMasterMob->Release();
            }
            pMob->Release();
        }
        pMobEnum->Release();
    }
    
    out << "[*] Built " << embeddedMapping.size() << " embedded file name mappings" << std::endl;
    return embeddedMapping;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
void traverseSegmentForEmbeddedMapping(IAAFSegment* pSegment, 
                                     IAAFHeader* pHeader,
                                     const std::set<std::string>& embeddedMobIDs,
                                     const std::map<std::string, std::string>& mobIdToName,
                                     std::map<std::string, std::string>& embeddedMapping,
                                     std::ofstream& out) {
    if (!pSegment) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–≥–º–µ–Ω—Ç SourceClip
    IAAFSourceClip* pSourceClip = nullptr;
    if (SUCCEEDED(pSegment->QueryInterface(IID_IAAFSourceClip, (void**)&pSourceClip))) {
        aafSourceRef_t sourceRef;
        if (SUCCEEDED(pSourceClip->GetSourceReference(&sourceRef))) {
            std::string masterMobIdStr = formatMobID(sourceRef.sourceID);
            out << "[DEBUG] Found SourceClip referencing MasterMob: " << masterMobIdStr << std::endl;
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–ª—è —ç—Ç–æ–≥–æ MasterMob
            std::string readableName;
            auto it = mobIdToName.find(masterMobIdStr);
            if (it != mobIdToName.end()) {
                readableName = it->second;
                out << "[DEBUG] MasterMob " << masterMobIdStr << " has name: " << readableName << std::endl;
            }
            
            // –¢–µ–ø–µ—Ä—å –∏—â–µ–º MasterMob –∏ —Å–º–æ—Ç—Ä–∏–º, –Ω–∞ –∫–∞–∫–∏–µ SourceMob –æ–Ω —Å—Å—ã–ª–∞–µ—Ç—Å—è
            IEnumAAFMobs* pMobEnum = nullptr;
            if (SUCCEEDED(pHeader->GetMobs(nullptr, &pMobEnum))) {
                IAAFMob* pMob = nullptr;
                while (SUCCEEDED(pMobEnum->NextOne(&pMob))) {
                    aafMobID_t mobID;
                    if (SUCCEEDED(pMob->GetMobID(&mobID))) {
                        std::string mobIdStr = formatMobID(mobID);
                        
                        // –ï—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω—ã–π MasterMob
                        if (mobIdStr == masterMobIdStr) {
                            IAAFMasterMob* pMasterMob = nullptr;
                            if (SUCCEEDED(pMob->QueryInterface(IID_IAAFMasterMob, (void**)&pMasterMob))) {
                                out << "[DEBUG] Found MasterMob: " << masterMobIdStr << std::endl;
                                
                                // –ò—â–µ–º —Å–ª–æ—Ç—ã MasterMob
                                aafNumSlots_t numSlots = 0;
                                if (SUCCEEDED(pMob->CountSlots(&numSlots))) {
                                    for (aafUInt32 j = 0; j < numSlots; ++j) {
                                        IAAFMobSlot* pMasterSlot = nullptr;
                                        if (SUCCEEDED(pMob->GetSlotAt(j, &pMasterSlot))) {
                                            IAAFSegment* pMasterSegment = nullptr;
                                            if (SUCCEEDED(pMasterSlot->GetSegment(&pMasterSegment))) {
                                                IAAFSourceClip* pMasterSourceClip = nullptr;
                                                if (SUCCEEDED(pMasterSegment->QueryInterface(IID_IAAFSourceClip, (void**)&pMasterSourceClip))) {
                                                    aafSourceRef_t masterSourceRef;
                                                    if (SUCCEEDED(pMasterSourceClip->GetSourceReference(&masterSourceRef))) {
                                                        std::string sourceMobIdStr = formatMobID(masterSourceRef.sourceID);
                                                        out << "[DEBUG] MasterMob slot " << j << " references SourceMob: " << sourceMobIdStr << std::endl;
                                                        
                                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç SourceMob embedded
                                                        if (embeddedMobIDs.find(sourceMobIdStr) != embeddedMobIDs.end()) {
                                                            if (!readableName.empty() && readableName != "[MasterMob]") {
                                                                embeddedMapping[sourceMobIdStr] = readableName;
                                                                out << "[MAPPING] " << sourceMobIdStr << " -> " << readableName << std::endl;
                                                            }
                                                        }
                                                    }
                                                    pMasterSourceClip->Release();
                                                }
                                                pMasterSegment->Release();
                                            }
                                            pMasterSlot->Release();
                                        }
                                    }
                                }
                                pMasterMob->Release();
                            }
                            break; // –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π MasterMob
                        }
                    }
                    pMob->Release();
                }
                pMobEnum->Release();
            }
        }
        pSourceClip->Release();
    }
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–≥–º–µ–Ω—Ç Sequence (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã)
    IAAFSequence* pSequence = nullptr;
    if (SUCCEEDED(pSegment->QueryInterface(IID_IAAFSequence, (void**)&pSequence))) {
        out << "[DEBUG] Found Sequence, traversing components..." << std::endl;
        IEnumAAFComponents* pCompEnum = nullptr;
        if (SUCCEEDED(pSequence->GetComponents(&pCompEnum))) {
            IAAFComponent* pComponent = nullptr;
            while (SUCCEEDED(pCompEnum->NextOne(&pComponent))) {
                IAAFSegment* pComponentSegment = nullptr;
                if (SUCCEEDED(pComponent->QueryInterface(IID_IAAFSegment, (void**)&pComponentSegment))) {
                    traverseSegmentForEmbeddedMapping(pComponentSegment, pHeader, embeddedMobIDs, mobIdToName, embeddedMapping, out);
                    pComponentSegment->Release();
                }
                pComponent->Release();
            }
            pCompEnum->Release();
        }
        pSequence->Release();
    }
}

std::map<std::string, std::string> extractAllEmbeddedFiles(IAAFHeader* pHeader, 
                                                       const std::map<std::string, std::string>& mobIdToName, 
                                                       const std::map<std::string, std::string>& embeddedNameMapping, 
                                                       std::ofstream& out) {
    std::map<std::string, std::string> embeddedFileMap; // MobID -> extracted file path
    
    if (!pHeader) return embeddedFileMap;
    
    out << "\nüéµ === EXTRACTING ALL EMBEDDED FILES ===" << std::endl;
    
    int extractedCount = 0;
    
    IEnumAAFEssenceData* pEssenceEnum = nullptr;
    if (SUCCEEDED(pHeader->EnumEssenceData(&pEssenceEnum))) {
        IAAFEssenceData* pEssenceData = nullptr;
        while (SUCCEEDED(pEssenceEnum->NextOne(&pEssenceData))) {
            aafMobID_t essenceMobID;
            if (SUCCEEDED(pEssenceData->GetFileMobID(&essenceMobID))) {
                std::string mobIdStr = formatMobID(essenceMobID);
                
                aafLength_t dataSize = 0;
                if (SUCCEEDED(pEssenceData->GetSize(&dataSize)) && dataSize > 0) {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    std::string outputPath;
                    
                    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ embedded —Ñ–∞–π–ª–æ–≤ (—Å–æ–±—Ä–∞–Ω–Ω–∞—è –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–ø–æ–≤)
                    auto globalIt = g_embeddedFileNames.find(mobIdStr);
                    if (globalIt != g_embeddedFileNames.end() && !globalIt->second.empty()) {
                        std::string originalName = globalIt->second;
                        out << "[DEBUG] Found global mapping for " << mobIdStr << " -> " << originalName << std::endl;
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                        std::string detectedExtension = detectFileExtension(pEssenceData, out);
                        
                        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
                        size_t dotPos = originalName.find_last_of('.');
                        if (dotPos != std::string::npos) {
                            originalName = originalName.substr(0, dotPos);
                        }
                        
                        outputPath = "extracted_media/" + originalName + detectedExtension;
                    } 
                    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ embedded —Ñ–∞–π–ª–æ–≤
                    else {
                        auto embeddedIt = embeddedNameMapping.find(mobIdStr);
                        if (embeddedIt != embeddedNameMapping.end() && !embeddedIt->second.empty()) {
                            std::string originalName = embeddedIt->second;
                            out << "[DEBUG] Found embedded mapping for " << mobIdStr << " -> " << originalName << std::endl;
                            
                            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                            std::string detectedExtension = detectFileExtension(pEssenceData, out);
                            
                            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
                            size_t dotPos = originalName.find_last_of('.');
                            if (dotPos != std::string::npos) {
                                originalName = originalName.substr(0, dotPos);
                            }
                            
                            outputPath = "extracted_media/" + originalName + detectedExtension;
                        } else {
                            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ SourceMob –¥–ª—è —ç—Ç–æ–≥–æ EssenceData –∏ –∏–∑–≤–ª–µ—á—å –∏–º—è —Ñ–∞–π–ª–∞
                        std::string extractedName;
                        IEnumAAFMobs* pMobEnum = nullptr;
                        if (SUCCEEDED(pHeader->GetMobs(nullptr, &pMobEnum))) {
                            IAAFMob* pMob = nullptr;
                            while (SUCCEEDED(pMobEnum->NextOne(&pMob))) {
                                aafMobID_t mobID;
                                if (SUCCEEDED(pMob->GetMobID(&mobID))) {
                                    std::string currentMobIdStr = formatMobID(mobID);
                                    if (currentMobIdStr == mobIdStr) {
                                        // –≠—Ç–æ SourceMob –¥–ª—è —ç—Ç–æ–≥–æ embedded —Ñ–∞–π–ª–∞
                                        IAAFSourceMob* pSourceMob = nullptr;
                                        if (SUCCEEDED(pMob->QueryInterface(IID_IAAFSourceMob, (void**)&pSourceMob))) {
                                            IAAFEssenceDescriptor* pEssDesc = nullptr;
                                            if (SUCCEEDED(pSourceMob->GetEssenceDescriptor(&pEssDesc))) {
                                                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Locators
                                                aafUInt32 numLocators = 0;
                                                if (SUCCEEDED(pEssDesc->CountLocators(&numLocators)) && numLocators > 0) {
                                                    IEnumAAFLocators* pLocatorEnum = nullptr;
                                                    if (SUCCEEDED(pEssDesc->GetLocators(&pLocatorEnum))) {
                                                        IAAFLocator* pLocator = nullptr;
                                                        if (SUCCEEDED(pLocatorEnum->NextOne(&pLocator))) {
                                                            aafUInt32 pathBufSize = 0;
                                                            if (SUCCEEDED(pLocator->GetPathBufLen(&pathBufSize)) && pathBufSize > 0) {
                                                                std::vector<aafCharacter> pathBuffer(pathBufSize / sizeof(aafCharacter));
                                                                if (SUCCEEDED(pLocator->GetPath(pathBuffer.data(), pathBufSize))) {
                                                                    std::string path = wideToUtf8(pathBuffer.data());
                                                                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏
                                                                    size_t lastSlash = path.find_last_of("/\\");
                                                                    if (lastSlash != std::string::npos) {
                                                                        extractedName = path.substr(lastSlash + 1);
                                                                    } else {
                                                                        extractedName = path;
                                                                    }
                                                                    out << "[DEBUG] Extracted filename from SourceMob " << mobIdStr << ": " << extractedName << std::endl;
                                                                }
                                                            }
                                                            pLocator->Release();
                                                        }
                                                        pLocatorEnum->Release();
                                                    }
                                                }
                                                pEssDesc->Release();
                                            }
                                            pSourceMob->Release();
                                        }
                                        break;
                                    }
                                }
                                pMob->Release();
                            }
                            pMobEnum->Release();
                        }
                        
                        if (!extractedName.empty()) {
                            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                            std::string detectedExtension = detectFileExtension(pEssenceData, out);
                            
                            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
                            size_t dotPos = extractedName.find_last_of('.');
                            if (dotPos != std::string::npos) {
                                extractedName = extractedName.substr(0, dotPos);
                            }
                            
                            outputPath = "extracted_media/" + extractedName + detectedExtension;
                        } else {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–∞–ø–ø–∏–Ω–≥ MobID -> –∏–º—è —Ñ–∞–π–ª–∞
                            auto generalIt = mobIdToName.find(mobIdStr);
                            if (generalIt != mobIdToName.end() && !generalIt->second.empty()) {
                                std::string mappedName = generalIt->second;
                                out << "[DEBUG] Found general mapping for " << mobIdStr << " -> " << mappedName << std::endl;
                                
                                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                                std::string detectedExtension = detectFileExtension(pEssenceData, out);
                                
                                // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
                                size_t dotPos = mappedName.find_last_of('.');
                                if (dotPos != std::string::npos) {
                                    mappedName = mappedName.substr(0, dotPos);
                                }
                                
                                outputPath = "extracted_media/" + mappedName + detectedExtension;
                            } else {
                                // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ MobID —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                                std::string detectedExtension = detectFileExtension(pEssenceData, out);
                                outputPath = "extracted_media/embedded_audio_" + mobIdStr + detectedExtension;
                                out << "[DEBUG] Using fallback name for " << mobIdStr << " -> " << outputPath << std::endl;
                            }
                        }
                        }
                    }
                    
                    out << "[EXTRACT] Extracting embedded file " << mobIdStr << " (" << dataSize << " bytes) -> " << outputPath << std::endl;
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª
                    extractEmbeddedAudio(pEssenceData, outputPath, out);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç—É –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    embeddedFileMap[mobIdStr] = outputPath;
                    extractedCount++;
                }
            }
            pEssenceData->Release();
        }
        pEssenceEnum->Release();
    }
    
    out << "[*] Extracted " << extractedCount << " embedded files" << std::endl;
    return embeddedFileMap;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ essence data
std::string detectFileExtension(IAAFEssenceData* pEssenceData, std::ofstream& out) {
    if (!pEssenceData) return ".wav";
    
    // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    aafUInt32 bytesToRead = 12;
    aafUInt8 buffer[12];
    aafUInt32 bytesRead = 0;
    
    if (SUCCEEDED(pEssenceData->Read(bytesToRead, buffer, &bytesRead)) && bytesRead >= 4) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Ñ–∞–π–ª–∞
        pEssenceData->SetPosition(0);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
        if (bytesRead >= 4) {
            // AIFF/AIFC —Ñ–∞–π–ª—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "FORM"
            if (buffer[0] == 'F' && buffer[1] == 'O' && buffer[2] == 'R' && buffer[3] == 'M') {
                if (bytesRead >= 12) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø AIFF
                    if (buffer[8] == 'A' && buffer[9] == 'I' && buffer[10] == 'F') {
                        if (buffer[11] == 'C') {
                            out << "[FORMAT] Detected AIFF-C format -> .aif" << std::endl;
                            return ".aif";
                        } else if (buffer[11] == 'F') {
                            out << "[FORMAT] Detected AIFF format -> .aif" << std::endl;
                            return ".aif";
                        }
                    }
                }
                out << "[FORMAT] Detected FORM container -> .aif" << std::endl;
                return ".aif";
            }
            // WAV —Ñ–∞–π–ª—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "RIFF"
            else if (buffer[0] == 'R' && buffer[1] == 'I' && buffer[2] == 'F' && buffer[3] == 'F') {
                out << "[FORMAT] Detected WAV format -> .wav" << std::endl;
                return ".wav";
            }
        }
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º .wav
    out << "[FORMAT] Unknown format, using default -> .wav" << std::endl;
    return ".wav";
}
